https://lucidworks.com/post/understanding-transaction-logs-softcommit-and-commit-in-sorlcloud/
https://lucene.apache.org/solr/guide/6_6/shards-and-indexing-data-in-solrcloud.html#ShardsandIndexingDatainSolrCloud-IgnoringCommitsfromClientApplicationsinSolrCloud
Sitecore.Configuration.Settings.Caching.TraceCacheScavenge
<updateRequestProcessorChain name="ignore-commit-from-client" default="true">
  <processor class="solr.IgnoreCommitOptimizeUpdateProcessorFactory">
    <int name="statusCode">200</int>
  </processor>
  <processor class="solr.LogUpdateProcessorFactory" />
  <processor class="solr.DistributedUpdateProcessorFactory" />
  <processor class="solr.RunUpdateProcessorFactory" />
</updateRequestProcessorChain>

Incoming documents are received by a node and forwarded to the proper shard leader.
From the shard leader theyâ€™re sent to all replicas for the shard.
The replicas respond to their leader.
The leader responds to the originating node.
After all the leaders have responded, the originating node replies to the client. At this point, all documents have been flushed to the tlog for all the nodes in the cluster!


public override DataUri[] GetItemsInWorkflowState(WorkflowInfo info, CallContext context)
{
	string sql = "SELECT TOP ({2}maxVersionsToLoad{3}) {0}ItemId{1}, {0}Language{1}, {0}Version{1}\r\n          FROM {0}VersionedFields{1}\r\n          WHERE {0}FieldId{1}= {2}workflowStateFieldID{3} \r\n          AND {0}Value{1}= {2}workflowStateFieldValue{3}\r\n          ORDER BY {0}Updated{1} DESC";
	DataUri[] result;
	using (DataProviderReader dataProviderReader = this.Api.CreateReader(sql, new object[]
	{
		"maxVersionsToLoad",
		Settings.Workbox.SingleWorkflowStateVersionLoadThreshold,
		"workflowStateFieldID",
		FieldIDs.WorkflowState,
		"workflowStateFieldValue",
		info.StateID
	}))
	{
		ArrayList arrayList = new ArrayList();
		while (dataProviderReader.Read())
		{
			ID id = this.Api.GetId(0, dataProviderReader);
			Language language = this.Api.GetLanguage(1, dataProviderReader);
			Version version = this.Api.GetVersion(2, dataProviderReader);
			arrayList.Add(new DataUri(id, language, version));
		}
		result = (arrayList.ToArray(typeof(DataUri)) as DataUri[]);
	}
	return result;
}
